package Chap4_스택과큐;

public class CircularQueue {
    private Point[] data;
    private int front;
    private int rear;
    boolean isEmpty;
    int capacity;
    
    public class EmptyCircularQueueException extends RuntimeException {
        private static final long serialVersionUID = 1L;
        public EmptyCircularQueueException() {}
    }
    
    public class OverflowCircularQueueException extends RuntimeException {
        private static final long serialVersionUID = 1L;
        public OverflowCircularQueueException() {}
    }
    
    public CircularQueue(int capacity) {
        front = rear = 0;
        isEmpty = true;
        this.capacity = capacity;
        try {
            data = new Point[capacity];
        } catch (OutOfMemoryError e) {
            capacity = 0;
        }
    }
    
    public void push(Point x) throws OverflowCircularQueueException {
        if ((rear + 1) % capacity == front) {
            throw new OverflowCircularQueueException();
        } else {
            data[rear] = new Point(x);
            rear = (rear + 1) % capacity;
            isEmpty = false;
        }
    }
    
    public Point pop() throws EmptyCircularQueueException {
        if (rear == front && isEmpty) {
            throw new EmptyCircularQueueException();
        } else {
            Point x = data[front];
            front = (front + 1) % capacity;
            if (front == rear) {
                isEmpty = true;
            }
            return x;
        }
    }
    
    public void clear() {
        for (int i = 0; i < data.length; i++) {
            data[i] = null;
        }
        front = rear = 0;
        isEmpty = true;
        System.out.println("원형큐를 비웠습니다.");
    }
    
    public void print() {
        int cursor = front;
        if (isEmpty) {
            System.out.println("원형큐가 비어있습니다.");
            return;
        }
        do {
            System.out.print(data[cursor] + " ");
            cursor = (cursor + 1) % capacity;
        } while (cursor != rear);
        System.out.println();
    }
}