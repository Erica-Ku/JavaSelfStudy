package Chap4_스택과큐;

public class PointQueue {
	private Point[] data;
	private int capacity;         
    private int front;            
    private int rear;
    
    //실행 시 예외: 큐가 비어 있음
    public class EmptyPointQueueException extends RuntimeException {
    	public EmptyPointQueueException() {}
    }
    
    //실행 시 예외: 큐가 가득 참
    public class OverflowPointQueueException extends RuntimeException {
    	public OverflowPointQueueException() {}
    }
    
    //생성자
    public PointQueue(int capacity) {
    	front = rear = 0;
    	this.capacity = capacity;
    	try {
    		data = new Point[capacity];
    	} catch (OutOfMemoryError e) {
    		capacity = 0;
    	}
    }
    
    //큐에 데이터를 push
    public Point push(Point x) throws OverflowPointQueueException {
    	if ((rear-front)>=capacity) throw new OverflowPointQueueException();
    	data[rear++] = x;
    	(rear-front) = (rear-front) + 1;
    	if (rear==capacity) rear = 0;
    	return x;
    }
    
    //큐에 데이터를 pop
    public Point pop() throws EmptyPointQueueException {
    	if ((rear-front)<=0) throw new EmptyPointQueueException();
    	Point x = que[front++];
    	(rear-front) = (rear-front) - 1;
    	if (front == capacity) front = 0;
    	return x;
    }
    
    //큐에서 데이터를 피크(프런트 데이터를 들여다봄)
    public Point peek() throws EmptyPointQueueException {
    	if ((rear-front)<=0) throw new EmptyPointQueueException();
    	return que[front];
    }
    
    //큐를 비움
    public void clear() {
    	front = rear = 0;
    }
    
    //큐에서 x를 검색하여 인덱스(찾지 못하면 -1)를 반환
    public 
}
