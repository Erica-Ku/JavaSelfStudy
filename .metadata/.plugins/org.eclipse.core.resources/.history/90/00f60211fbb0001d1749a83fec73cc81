package Chap5_재귀알고리즘;

public class Maze {
	
	class offsets {
		int a, b;
	}

	class items {
		int x;
		int y;
		int dir;
	}
	
	enum direction {
		N, NE, E, SE, S, SW, W, NW
	}
	
	offsets moves[] = new offsets [8];
	int maze[][] = new int [100][100];
	int mark[][] = new int [100][100];
	
	void path(int m, int p) {
		mark[1][1] = 1;
		MazeStack ms = new MazeStack(m*p);
		items items = new items();
		int temp;
		
		items.x = 1;
		items.y = 1;
		items.dir = 'E';
		
		ms.push(items.x);
		ms.push(items.y);
		ms.push(items.dir);
		
		while(!ms.isEmpty()) {
			temp = ms.pop();
			int i = items.x; int j = items.y; int d = items.dir;
			while(d<8) {
				int g = i + moves[d].a;
				int h = j + moves[d].b;
				if ((g == m) && (h == p)) {
					System.out.println(ms);
					System.out.println("the term near the exit: " + i + " " + j );
					System.out.println("exit: " + m + " " + p);
					return;
				}
				if (maze[i][j]!=maze[g][h]) 
					if(mark[i][j]!=mark[g][h]) {
						mark[g][h] = 1;
						items.x = i;  items.y = j; items.dir = d + 1;
						ms.push(items.x);
						ms.push(items.y);
						ms.push(items.dir);
						i = g; j = h; d = N;
				}
				else d++;
			}
		}
		System.out.println("no path in maze ");
	}
	
	public static void main(String[] args) {
		int input[][] = {{ 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1 },
						{ 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1 },
						{ 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1 },
						{ 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0 },
						{ 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 },
						{ 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1 },
						{ 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1 },
						{ 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 },
						{ 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1 },
						{ 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0 },
						{ 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0 },
						{ 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0 }};
		
	}
	
}
