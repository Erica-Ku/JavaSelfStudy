package Chap10_해시;

//체인법에 의한 해시

public class ChainHash<K,SimpleObject> {

 //--- 해시를 구성하는 노드 ---//
 class Node<K,SimpleObject> {
     private K key;                 // 키값
     private SimpleObject data;                // 데이터
     private Node<K,SimpleObject> next;        // 뒤쪽 포인터(뒤쪽 노드에 대한 참조)

     //--- 생성자(constructor) ---//
     Node(K key, SimpleObject data, Node<K,SimpleObject> next) {
         this.key  = key;
         this.data = data;
         this.next = next;
     }

     //--- 키값을 반환 ---//
     K getKey() {
         return key;
     }

     //--- 데이터를 반환 ---//
     SimpleObject getValue() {
         return data;
     }

     //--- 키의 해시값을 반환 ---//
     public int hashCode() {
         return key.hashCode();
     }
 }

 private int    size;              // 해시 테이블의 크기
 private Node<K,SimpleObject>[] table;        // 해시 테이블

 //--- 생성자(constructor) ---//
 public ChainHash(int capacity) {
     try {
         table = new Node[capacity];
         this.size = capacity;
     } catch (OutOfMemoryError e) {        // 테이블을 생성할 수 없음
         this.size = 0;
     }
 }

 //--- 해시값을 구함 ---//
 public int hashValue(Object key) {
     return key.hashCode() % size;
 }

 //--- 키값이 key인 요소를 검색(데이터를 반환) ---//
 public SimpleObject search(K key) {
	 int hash = hashValue(key);        
     Node<K,SimpleObject> p = table[hash];           

     while (p != null) {
         if (p.getKey().equals(key))
             return p.getValue();                
         p = p.next;                             
     }
     return null;
 }

 //--- 키값이 key인 데이터를 data의 요소로 추가 ---//
 public int add(K key, SimpleObject data) {
     int hash = hashValue(key);
     Node<K,SimpleObject> p = table[hash];
     while (p!=null) {
    	 if(p.getKey().equals(key))
    		 return 1;
    	 p = p.next;
     }
     Node<K,SimpleObject> temp = new Node<K,SimpleObject>(key, data, table[hash]);
     table[hash] = temp;
     return 0;
 }

 //--- 키값이 key인 요소를 삭제 ---//
 public int remove(K key) {
     int hash = hashValue(key);
     Node<K,SimpleObject> p = table[hash];
     Node<K,SimpleObject> pp = null;
     while (p!=null) {
    	 if(p.getKey().equals(key)) {
    		 if(pp==null) table[hash] = p.next;
    		 else pp.next = p.next;
    		 return 0;
    	 }
    	 pp = p;
    	 p = p.next;
     }
     return 1;
 }

 //--- 해시 테이블을 덤프(dump) ---//
 public void dump() {
     for (int i = 0; i < size; i++) {
    	 Node<K,SimpleObject> p = table[i];
    	 System.out.printf("%02d ", i);
    	 while (p!=null) {
    		 System.out.printf("→ %s (%s) ", p.getKey(), p.getValue());
    		 p = p.next;
    	 }
    	 System.out.println();
     }
 }
}